#!/usr/bin/env node

const https = require('https');
const axios = require('axios');
const p = require('commander');
const _ = require('lodash');

p
  .version('0.1.0')
  .usage('jirac-list [options]')
  .option('-j, --jql <JQL strings>', 'show list searched by specified JQL')
  .option('-o, --origin <an origin of JIRA REST API>', 'specify an origin if you use JIRA on-premise')
  .option('-a, --assignee <employee id>', 'filter by an assignee')
  .option('-p, --project <project name>', 'filter by a project')
  .option('-f, --fixVersion <fix version name>', 'fitler by a fix version')
  .parse(process.argv);

const jql = p.jql ? encodeURIComponent(p.jql) : _.compact([
    p.assignee && `assignee!=${p.assignee}`,
    p.project && `project=${p.project}`,
    // will wrap by "" and encode it. Because it may include space character.
    p.fixVersion && `fixVersion=${encodeURIComponent(`"${p.fixVersion}"`)}`,
  ]).join('+AND+');

// Default number of rows we can get from API is 50. So we changed it to 9999.
// see: https://community.atlassian.com/t5/Answers-Developer-Questions/How-to-get-more-than-50-issues-with-search-API/qaq-p/463122
const options = ['maxResults=9999'].join('&');

const jiraOrigin = p.origin || process.env.JIRA_ORIGIN || `https://jira.atlassian.com`;
const bufferFrom = Buffer.from ? Buffer.from : new Buffer;

const httpRequestOptions = {
  url: `${jiraOrigin}/rest/api/2/search?jql=${jql}&${options}`,
  method: 'GET',
  headers: {
    'Authorization': "Basic " + bufferFrom(`${process.env.JIRA_USER}:${process.env.JIRA_PASSWORD}`).toString('base64')
  }
};

const generateLine = (issue) => `${issue.key} ${issue.fields.assignee ? issue.fields.assignee.displayName : '(no assignee)'} ${issue.fields.priority.name} ${issue.fields.summary}`;

axios(httpRequestOptions).then((result) => {
  const list = result.data.issues.map(issue => generateLine(issue))
  list.forEach((issue) => console.log(issue))
}).catch((err) => {
  console.error(err);
})
